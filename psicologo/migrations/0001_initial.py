# Generated by Django 4.2.5 on 2023-09-06 17:12

import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import psicologo.validadores_modelos


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Otro_significativo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=200)),
                ('edad', models.SmallIntegerField()),
                ('ocupacion', models.CharField(max_length=200)),
                ('parentesco', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Paciente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_registro', models.DateField(auto_now_add=True, verbose_name='Fecha del registro inicial')),
                ('nombre', models.CharField(max_length=100, verbose_name='Nombre')),
                ('apellidos', models.CharField(max_length=100, verbose_name='Apellidos')),
                ('numero_id', models.CharField(max_length=15, verbose_name='Número de identificación')),
                ('fecha_nacimiento', models.DateField(help_text='Ingrese la fecha de nacimiento en formato dd-mm-aaaa', validators=[psicologo.validadores_modelos.validar_fecha_anterior, psicologo.validadores_modelos.validar_edad], verbose_name='Fecha de nacimiento')),
                ('sexo', models.CharField(choices=[('hombre', 'Hombre'), ('mujer', 'Mujer')], max_length=50)),
                ('orientacion_sexual', models.CharField(choices=[('heterosexual', 'Heterosexual'), ('homosexual', 'Homosexual'), ('bisexual', 'Bisexual'), ('pansexual', 'Pansexual'), ('asexual', 'Asexual'), ('otro', 'Otro')], error_messages={'null': 'Debes seleccinar una opción'}, help_text='Seleccione una orientación sexual', max_length=50, verbose_name='Orientación sexual')),
                ('estado_civil', models.CharField(choices=[('soltero', 'Soltero'), ('casado', 'Casado'), ('separado', 'Separado'), ('divorciado', 'Divorciado'), ('viudo', 'Viudo'), ('otro', 'Otro')], max_length=50)),
                ('estrato', models.IntegerField(choices=[(1, '1'), (1, '2'), (1, '3'), (1, '4'), (1, '5'), (1, '6')], help_text='Seleccione un número entre 1 y 6', validators=[psicologo.validadores_modelos.validar_estrato], verbose_name='Estrato socioeconómico')),
                ('ocupacion', models.CharField(max_length=250, verbose_name='Ocupación actual')),
                ('direccion', models.TextField(error_messages={'null': 'Este campo no puede estar vacío'}, help_text='Ingrese una dirección válida de residencia', max_length=400, verbose_name='Dirección de residencia')),
                ('telefono_fijo', models.CharField(error_messages={'null': 'Este campo no puede estar vacío'}, help_text='Debe iniciar con 6 y tener diez dígitos. Por ejemplo 6012222222', max_length=10, validators=[django.core.validators.RegexValidator(message='Debe empezar por 6 y tener diez dígitos: por ejemplo 6012222222', regex='^6\\d{9}$')], verbose_name='Número telefónico fijo')),
                ('telefono_celular', models.CharField(error_messages={'null': 'Este campo no puede estar vacío'}, help_text='Debe iniciar con 3 y tener diez dígitos', max_length=10, validators=[django.core.validators.RegexValidator(message='Ingresa un número telefónico válido, que empiece por 3 y de diez dígitos', regex='^3\\d{9}$')], verbose_name='Número telefónico celular')),
                ('correo_electronico', models.EmailField(error_messages={'invalid': 'Ingresa una dirección válidad de correo electrónico', 'null': 'Este campo no puede estar vacío', 'unique': 'Esta dirección de correo electrónico ya está en uso'}, help_text='Ingresa una dirección válida de correo electrónico', max_length=254, unique=True, verbose_name='Correo electrónico')),
                ('eps', models.CharField(error_messages={'null': 'Este campo no puede estar vacío'}, help_text='Ingrese el nombre de la EPS a la que pertenece el usuario', max_length=100, verbose_name='EPS')),
                ('motivo_consulta', models.TextField(help_text='Escriba textualmente el motivo de consulta del usuario', verbose_name='Motivo de consulta')),
                ('diagnosticos_medicos_actuales', models.TextField(help_text='Escriba una lista con todos los diagnósticos médicos que tiene actualmente el usuario', verbose_name='Diagnósticos médicos actuales')),
                ('diagnosticos_psiquiatricos_actuales', models.TextField(help_text='Escriba una lista con todos los diagnósticos médicos que tiene actualmente el usuario', verbose_name='Diagnósticos psiquiátricos actuales')),
                ('estado', models.CharField(choices=[('activo', 'Activo'), ('suspendido', 'Suspendido'), ('perdido', 'Perdido'), ('finalizó_tratamiento', 'Finalizó tratamiento')], error_messages={'null': 'Debes seleccinar una opción'}, help_text='Seleccione el estado actual del servicio', max_length=50, verbose_name='Estado actual')),
                ('contacto_emergencia', models.ManyToManyField(help_text='Agrega a una o varias personas que serán el contacto de emergencia del usuario', related_name='paciente_emergencia', to='psicologo.otro_significativo', verbose_name='Contacto de emergencia')),
                ('personas_convive', models.ManyToManyField(help_text='Agrega a todas las personas con las que el usuario conviva', related_name='paciente_convive', to='psicologo.otro_significativo', verbose_name='Personas con las que convive')),
            ],
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Correo electrónico')),
                ('profesion', models.CharField(blank=True, max_length=50, verbose_name='Profesión')),
                ('anios_experiencia', models.IntegerField(blank=True, default=0, verbose_name='Años de experiencia')),
                ('first_name', models.CharField(help_text='Ingrese su nombre o nombres completos completo', max_length=150, verbose_name='Nombre')),
                ('last_name', models.CharField(help_text='Intrese su apellido o apellidos', max_length=150, verbose_name='Apellidos')),
                ('telefono_celular', models.CharField(blank=True, error_messages={'null': 'Este campo no puede estar vacío'}, help_text='El número telefónico debe iniciar con 3 y tener diez dígitos', max_length=10, validators=[django.core.validators.RegexValidator(message='Ingresa un número telefónico válido, que empiece por 6 y de diez dígitos', regex='^6\\d{9}$')], verbose_name='Número de celular')),
                ('direccion', models.CharField(blank=True, error_messages={'null': 'Este campo no puede estar vacío'}, help_text='Ingrese una dirección válida de residencia', max_length=400, verbose_name='Dirección del consultorio')),
                ('groups', models.ManyToManyField(related_name='usuarios_en_grupo', to='auth.group', verbose_name='Grupos')),
                ('user_permissions', models.ManyToManyField(related_name='usuario_con_permiso', to='auth.group', verbose_name='Permisos de usuario')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sesiones',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_programada_sesion', models.DateField(validators=[psicologo.validadores_modelos.validar_fecha_anterior], verbose_name='Fecha de la próxima sesión')),
                ('hora_programada', models.TimeField(help_text='Ingrese una hora en formato válido de 12 horas. Por ejemplo: 04:00 PM', verbose_name='Hora en la que se desarrollará la sesión')),
                ('fecha_sesion', models.DateField(blank=True, null=True, validators=[psicologo.validadores_modelos.validar_fecha_anterior], verbose_name='Fecha de desarrollo de la sesión')),
                ('hora_inicio_sesion', models.TimeField(blank=True, help_text='Ingrese la hora en la que efectivamente inició la sesión', null=True, verbose_name='Hora de inicio de sesión')),
                ('hora_fin_sesion', models.TimeField(blank=True, help_text='Ingrese la hora en la que finalizó la sesión', null=True, verbose_name='Hora de finalización de la sesión')),
                ('objetivo_sesion', models.TextField(blank=True, help_text='Ingrese un objetivo claro y descriptivo para la sesión que va a registrar', null=True, verbose_name='Objetivo de la sesión a registrar')),
                ('desarrollo_sesion', models.TextField(blank=True, help_text='Describa el desarrollo de la sesión. Asegúrese de resumir de manera clara y precisa', null=True, verbose_name='Descripción del desarrollo de la sesión')),
                ('tareas_sesion', models.TextField(blank=True, help_text='Haga una lista de las tareas o ejercicios que acordó con su usuario', null=True, verbose_name='Tareas para la próxima sesión')),
                ('estado', models.CharField(choices=[('programada', 'Programada'), ('cumplida', 'Cumplida'), ('incumplida', 'Incumplida'), ('cancelada_paciente', 'Cancelada por el paciente'), ('cancelada_terapeuta', 'Cancelada por el terapeuta')], default='programada', help_text='Seleccione el estado de la consulta', max_length=25, verbose_name='Estado de la consulta')),
                ('zona_horaria', models.CharField(max_length=50)),
                ('paciente', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sesiones', to='psicologo.paciente')),
                ('terapeuta', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='psicologo.usuario')),
            ],
        ),
        migrations.AddField(
            model_name='paciente',
            name='terapeuta',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='psicologo.usuario'),
        ),
    ]
